===================================START INTRO AND SUMMARY=============================================================
    This scratch.txt document will serve as the running notepad for the project. Other documentation may be written as
    time goes on and the project advances, but this scratch.txt will serve as the active notepad. Below will be notes on
    the compiler as a whole, as well as specific portions. Scanner, Parser, Linker, Assembly, etc. Each note entered
    will be dated and boxed off for the relevant time/date it was entered like so:

    Example:

    ===================================12/31/2017 - START - 08:57 - JRinderer:=========================================
        ******SUMMARY: Each section will contain a summary of the notes to follow. Today is Dec 31st 2017.
        ---------------------------------------------------------------------------------------------------------------
            -More Notes...
            -...
    ===================================12/31/2017 - END - 20:00 - JRinderer============================================

    If a day's notes are subdivided for that day the format below will be used.

    Example:

    ===================================12/31/2017 - START - 08:57 - JRinderer:=========================================
        ******SUMMARY: Each section will contain a summary of the notes to follow. Today is Dec 31st 2017.

            -Today is December 31st 2017 and this noted repeats this information
            -More Notes...
        ---------------------------------------------------------------------------------------------------------------
        ******SUMMARY: If the day's notes are subdivided then the format here will be used.
            -This is a sub section of today's notes.
            -This section will discuss the subdivision of notes.
    ===================================12/31/2017 - END - 20:00 - JRinderer============================================


    The format above will be followed throughout the notebook in order to break up time/dates and progress.

    When edits are made to previous notes (for example if I re-write my types and sub-divide the operators into multiple
    types they will be notated with in the START field, the edits will be made to the original with a **START DATE**
    at the beginning and a **END DATE** where the edits ended. A copy of the original (only where changes made) will be
    added to the bottom of that days note with the Original Date **ORIGINAL DATE and will be encolsed in *****

    Example:

    ===================================12/31/2017 - START - 09:01 - JRinderer **1/1/2018 JRinderer**:==================
        **START 1/1/2018**
        -Operators for KLUMP: These will need further work to break down into Sub groups mathematical vs operational
               Mathematical: These will perform basic math:
                    1. +
                    2. -
                    3. *
                    4. /
                    5. %
               Comparison: These will compare values:
                    6. <>
                    7. <
                    8. >
                    9. =
                    10. !=
        **END 1/1/2018**

        **ORIGINAL 12/31/2017 - JRinderer******************************************************************************
           -Operators for KLUMP: These will need further work to break down into Sub groups mathematical vs operational
               1. :
               2. ;
               3. .
               4. (
               5. )
               6. {
               7. }
               8. [
               9. ]
               10. #
        ***************************************************************************************************************
    ===================================12/31/2017 - END - 11:01 - JRinderer **1/1/2018 JRinderer**:====================
===================================END INTRO AND SUMMARY===============================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
===================================12/31/2017 - START - 09:01 - JRinderer:=============================================
    *****SUMMARY: Outlined below are the basic overall requirements for the KLUMP languaged as well as the types of:
    *****{Characters, Numbers, Operators, etc} that will be found in the KLUMP. language. Brief description
    *****will be provided.

        - Requirements for Language: These are the general rules/criteria/actions/features the language must contain.
            1. procedural.
            2. Typed.
            3. Fixed length types.
            4. Allows structured data types (arrays, records, fixed length string literals).
            5. No dynamic structures.
            6. Global and local scope.
            7. Require declaration before definition or reference.
            8. Static allocation for global variables.
            9. Automatic allocation for local variables (NO DYNAMIC ALLOCATION).
            10. Call by value and call by variable (structured data types must be call by reference).
            11. Recursion is permitted by default.
            12. Return types are limited by atomic data types ONLY.

        -Character set for KLUMP: These characters are either **char** or **int** types
            1. A - Z (FORCE UPPER CASE ON ALL CHARACTERS) -- Break out into LETTERS TYPE?
            2. 0 - 9 -- Break out into NUMBERS TYPE?

        -Reserved Words for KLUMP: These words are key words that indicate some action for the compiler to take
            1. AND
            2. ARRAY
            3. ASCII
            4. BEGIN
            5. BOOL
            6. BREAK
            7. CALL
            8. CASE
            9. CONST
            10. CSTRING
            11. DCL
            12. DECIMAL
            13. DEFAULT
            14. DO
            15. DOWNTO
            16. ELSE
            17. END
            18. FOR
            19. GLOBAL
            20. GOTO
            21. IF
            22. INT
            23. NEXT
            24. NOT
            25. NUMBER
            26. OF
            27. OR
            28. PROC
            29. PROCEDURE
            30. READ
            31. READLN
            32. REAL
            33. RECORD
            34. RETURN
            35. STRING
            36. THEN
            37. TO
            38. TYPE
            39. VAR
            40. WHILE
            41. WRITE
            42. WRITELN

         -Operators for KLUMP: These will need further work to break down into Sub groups mathematical vs operational
            1. :
            2. ;
            3. .
            4. (
            5. )
            6. {
            7. }
            8. [
            9. ]
            10. #
            11. :=
            12. =
            13. <>
            14. <
            15. >
            16. <=
            17. >=
            18. +
            19. -
            20. *
            21. /
            22. %
    -------------------------------------------------------------------------------------------------------------------
    ******SUMMARY: Notes on dividing operators into various sub groups. Ideas and examples not final. Mathematics,
    ******comparison, operational.

         Note on operators... Consider making categories comparison, mathematics. gramatical... etc.
         -Possible Break Down for Operators:
              Comparison: These operators can compare items against other items.
                  1. =
                  2. <>
                  3. <
                  4. >
                  5. <=
                  6. >=

              Mathematics: These operators can performa mathematics on integers.
                  1. +
                  2. -
                  3. *
                  4. /
                  5. %
                  6. = (not to be confused with := which sets equality similar to C == an =
===================================12/31/2017 - END 22:00 - JRinderer==================================================
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
===================================1/1/2018 - Start 09:10 - JRinderer==================================================
    ********Summary: Today I'm focusing on making the demo scanner output a file tht it can pass to a parser. Right
    the current scanner needs to be modified to look at the KLUMP lexeme's. The ultimate goal is to generate a .txt
    (for now) that will meet the criteria outlined below.

        -File output from the scanner program:
            1. Data output in column type format.
            2. Column 1 should contain the TOKEN type.
            3. Column 2 should contain the LEXEME.uld
            4. Column 3 (possible add) should contain LINE #.
            5. The program should then generate a .txt file that meets this critiera.
            6. The output file generated should be saved in the directory working directory.

        -Notes on the current program:
            1. The current program currently printns out the LEXEME as a TOKEN and the line number.
            2. Must be modified in the following ways:
                a. Current TOKEN -> LEXEME
                b. Must add TOKEN (from KLUMP).OPERATOR, CONDITIONAL OPERATOR etc.
                3. Store line numbers so error messages can be generated.
            3.Output a file that displays only the following.
                a. TOKEN
                b. LEXEME
                c. LINE #

        -Adjusted to read for KLUMP KEYWORDS. Successfully converted all keywords to upper case.
        -Wrote mkeUprCse function to force all chars into upper case format.
        -Remaining steps:
            1. Move LINE to a 3rd column.
            2. Insert any constants in second column.
            3. Output to .txt file.